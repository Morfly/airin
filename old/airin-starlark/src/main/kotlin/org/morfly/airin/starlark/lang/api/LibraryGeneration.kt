/*
 * Copyright 2021 Pavlo Stavytskyi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.morfly.airin.starlark.lang.api

import org.morfly.airin.starlark.lang.api.BracketsKind.Curly
import org.morfly.airin.starlark.lang.api.BracketsKind.Round
import org.morfly.airin.starlark.lang.api.ReturnKind.Type
import kotlin.annotation.AnnotationRetention.RUNTIME
import kotlin.annotation.AnnotationTarget.CLASS
import kotlin.annotation.AnnotationTarget.PROPERTY


/**
 *
 */
@Retention(RUNTIME)
@Target(CLASS)
annotation class LibraryFunction(
    val name: String,
    val scope: Array<FunctionScope>,
    val kind: FunctionKind,
    val brackets: Array<BracketsKind> = [Round, Curly],
    val doc: String = ""// TODO implement documentation generation
)

/**
 *
 */
@Retention(RUNTIME)
@Target(PROPERTY)
annotation class Argument(
    val underlyingName: String = NAME_DEFAULT,
    val required: Boolean = false,
    val vararg: Boolean = false,
    val inline: Boolean = false // TODO implement shortened syntax for dictionary args
) {
    companion object {
        const val NAME_DEFAULT = "<default>"
    }
}

/**
 *
 */
@Retention(RUNTIME)
@Target(PROPERTY)
annotation class Returns(
    val kind: ReturnKind = Type
)

/**
 * Function type defines the behavior of Starlark template engine when generating code for the function.
 */
enum class FunctionKind {

    /**
     * Function is used as a statement. Instantly generates corresponding Starlark code right after the function call
     * was found in the abstract syntax tree (AST), generated by DSL.
     * As an example, this type is applicable for Bazel rules.
     */
    Statement,

    /**
     * Function is used as an expression with a specified return type. Defers Starlark code generation for this particular
     * function until it happens for the element in AST that uses this expression.
     * As an example, this type is applicable for library functions such as 'glob'.
     */
    Expression
}

/**
 *
 */
enum class BracketsKind {
    /**
     *
     */
    Round,

    /**
     *
     */
    Curly
}

/**
 * Defines scopes related to different types of files that use Starlark language.
 */
enum class FunctionScope {

    /**
     * Corresponds to regular *.star or *.bzl Starlark files.
     */
    Starlark,

    /**
     * Corresponds to Bazel WORKSPACE files.
     */
    Workspace,

    /**
     * Corresponds to Bazel BUILD files.
     */
    Build
}

/**
 *
 */
enum class ReturnKind {

    /**
     * Takes type of the annotated property as a return type of the generated function.
     * Name of the annotated property is ignored.
     */
    Type,

    /**
     * Return type of the generated function is defined dynamically and depends on the type expected by the consumer.
     * Name and type of the annotated property are ignored.
     */
    Dynamic
}