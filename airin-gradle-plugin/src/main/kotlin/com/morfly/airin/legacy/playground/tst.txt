airin {
    constraints {
        build {

        }
        projects(this)
    }

    templates {
        modules {

        }

    }

    artifacts {
        ignored(
            "com.example:name:1.0.0",
        )

        ignored {
            artifacts("com.example:name:1.0.0")
        }

        mapping {
            constraints {
                projects(
                    ":app",
                    children(":lib", "lib1"),
                    ignoringSoftly(all(":lib2")),
                    ignoring(all(":lib2"))
                )
                workspace = true
                build = true
                bazelrc = false
            }

            "com.example:name:1.0.0" to null,
            "com.example:name:1.0.0" to "com.example:another_name:1.0.0"
            "com.example:name:1.0.0" to ref("DAGGER_ARTIFACTS")

            listOf(
                "com.example:name:1.0.0",
                "com.example:another_name:1.0.0"
            ) to ref("CUSTOM_NAME")
        }
    }
}


operator fun String?.getValue(thisRef: Any?, property: KProperty<*>): String? {
    return "$thisRef, thank you for delegating '${property.name}' to me!"
}

operator fun String?.setValue(thisRef: Any?, property: KProperty<*>, value: String?) {
    println("$value has been assigned to '${property.name}' in $thisRef.")
}

operator fun <T> List<T>.getValue(thisRef: Any?, property: KProperty<*>): List<T> {
    return emptyList()
}

operator fun <T> List<T>.setValue(thisRef: Any?, property: KProperty<*>, value: List<T>) {
    println("$value has been assigned to '${property.name}' in $thisRef.")
}

var rules_kotlin_version by "legacy-1.3.0"
var deps by listOf("")